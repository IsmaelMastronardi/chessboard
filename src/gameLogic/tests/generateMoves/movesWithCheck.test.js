const { calculatePosibleMoves } = require("../../generateMoves");

describe('return all posible, legal moves with a single check', () => {
  describe('black attacking', () => {
    describe('should be able to block, take or move', () => {
      const pinTests = [
        {
          board:
          {
            pieces: [
              ['k', '0', '0', '0', '0', '0', '0', '0'],
              ['0', 'q', '0', '0', '0', '0', 'R', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'K']
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '77': [{move: [6, 7]}, {move: [7, 6]}],
              '16': [{move: [6, 6]}, {capture: true, capturedPiece: 'q', move: [1, 1]}]
          }
        },
        {
          board:
          {
            pieces: [
              ['k', '0', '0', '0', '0', '0', '0', '0'],
              ['0', 'q', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', 'B', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'K']
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '26': [{move: [4, 4]}],
              '77': [{move: [6, 7]}, {move: [7, 6]}]
          }
        },
        {
          board:
          {
            pieces: [
              ['k', '0', '0', '0', '0', '0', '0', '0'],
              ['0', 'q', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', 'N', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'K']
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '23': [{move: [4, 4]}, {capture: true, capturedPiece: 'q', move: [1, 1]}],
              '77': [{move: [6, 7]}, {move: [7, 6]}]
          }
        },
        {
          board:
          {
            pieces: [
              ['k', '0', '0', '0', '0', '0', '0', '0'],
              ['0', 'q', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', 'Q', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'K']
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '61': [{capture: true, capturedPiece: 'q', move: [1, 1]}, {move: [6, 6]}],
              '77': [{move: [6, 7]}, {move: [7, 6]}]          
          }
        },
        {
          board:
          {
            pieces: [
              ['k', '0', '0', '0', '0', '0', '0', '0'],
              ['0', 'q', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', 'P', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'K']
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '54': [{move: [4, 4]}],
              '77': [{move: [6, 7]}, {move: [7, 6]}]
          }
        },
        {
          board:
          {
            pieces: [
              ['k', '0', '0', 'N', '0', '0', '0', '0'],
              ['0', 'q', '0', '0', '0', 'B', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', 'P', '0', '0', '0'],
              ['0', '0', 'Q', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'K']
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '03': [{move: [2, 2]}, {capture: true, capturedPiece: 'q', move: [1, 1]}],
              '15': [{move: [3, 3]}],
              '54': [{move: [4, 4]}],
              '62': [{move: [2, 2]}, {move: [6, 6]}, {move: [4, 4]}],
              '77': [{move: [6, 7]}, {move: [7, 6]}]
          }
        },
      ];
      pinTests.forEach(({board, expectedMoves}) => {
        test('in different positions', () => {
          expect(calculatePosibleMoves(board, 'white')).toEqual(expectedMoves);
        });
      });
    });
    describe('should be only able to move', () => {
      const pinTests = [
        {
          board:
          {
            pieces: [
              ['k', '0', '0', '0', '0', '0', '0', '0'],
              ['0', 'q', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'P'],
              ['0', '0', '0', '0', '0', '0', '0', 'K'],
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '77': [{move: [7, 6]}]
          }
        },
        {
          board:
          {
            pieces: [
              ['q', '0', '0', '0', 'r', '0', 'k', '0'],
              ['0', 'r', 'p', 'p', 'b', 'p', 'p', 'p'],
              ['0', '0', '0', '0', 'b', 'n', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['P', '0', '0', '0', '0', '0', '0', '0'],
              ['P', '0', 'P', 'P', 'P', 'P', 'P', 'P'],
              ['0', 'K', 'R', '0', '0', 'B', 'N', '0'],
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '71': [{move: [7, 0]}]
          }
        },
        {
          board:
          {
            pieces: [
              ['0', '0', 'r', '0', 'q', '0', '0', 'k'],
              ['0', '0', '0', '0', '0', 'n', 'p', 'p'],
              ['n', '0', '0', '0', '0', 'p', '0', '0'],
              ['0', 'b', '0', '0', 'p', '0', '0', '0'],
              ['p', '0', '0', '0', 'P', '0', '0', '0'],
              ['P', 'K', '0', '0', '0', 'P', '0', '0'],
              ['0', 'P', 'P', 'P', '0', '0', 'P', 'P'],
              ['0', '0', '0', 'B', 'N', '0', '0', 'R'],
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '51': [{move: [6, 0]}]
            }
        },
        {
          board:
          {
            pieces: [
              ['0', '0', '0', '0', '0', 'q', '0', 'k'],
              ['0', '0', '0', '0', '0', '0', 'p', 'p'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', 'R', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', 'n', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', 'N', 'P', 'P', 'K', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '66': [{move: [7, 6]}, {move: [7, 7]}, {move: [6, 7]}, {move: [5, 6]}, {move: [5, 5]}, {move: [7, 5]}]
            }
        },
      ];
      pinTests.forEach(({board, expectedMoves}) => {
        test('in different positions', () => {
          expect(calculatePosibleMoves(board, 'white')).toEqual(expectedMoves);
        });
      });
    });
    describe('should be only able to block', () => {
      const pinTests = [
        {
          board:
          {
            pieces: [
              ['k', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', 'b', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', 'p', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', 'P', 'P', 'K'],
              ['r', '0', '0', '0', '0', '0', '0', '0'],
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '65': [{move: [4, 5]}],
              '66': [{move: [5, 6]}]
          }
        },
        {
          board:
          {
            pieces: [
              ['k', '0', '0', '0', '0', '0', '0', '0'],
              ['0', 'b', 'b', '0', '0', '0', '0', '0'],
              ['0', 'q', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', 'p', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', 'N', '0', '0', 'K'],
              ['r', '0', '0', '0', '0', '0', '0', '0'],
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '64': [
                {move: [4, 5]},
                {move: [5, 6]}
            ]
          }
        },
      ];
      pinTests.forEach(({board, expectedMoves}) => {
        test('in different positions', () => {
          expect(calculatePosibleMoves(board, 'white')).toEqual(expectedMoves);
        });
      });
    });
    describe('should be only able to take', () => {
      const pinTests = [
        {
          board:
          {
            pieces: [
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', 'q', '0', '0', '0'],
              ['0', '0', '0', 'K', '0', '0', '0', '0'],
              ['r', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', 'r', '0', '0', '0', '0', '0'],
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '43': [{capture: true, capturedPiece: 'q', move: [3, 4]}]
          }
        },
        {
          board:
          {
            pieces: [
              ['0', '0', 'q', '0', '0', '0', '0', 'k'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'b'],
              ['0', '0', '0', 'r', '0', '0', '0', '0'],
              ['0', '0', '0', 'K', 'P', '0', '0', '0'],
              ['P', 'P', 'P', '0', '0', 'P', 'P', 'P'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '53': [{capture: true, capturedPiece: 'r', move: [4, 3]}],
              '54': [{capture: true, capturedPiece: 'r', move: [4, 3]}]
          }
        },
      ];
      pinTests.forEach(({board, expectedMoves}) => {
        test('in different positions', () => {
          expect(calculatePosibleMoves(board, 'white')).toEqual(expectedMoves);
        });
      });
    });
    describe('should be checkmate', () => {
      const pinTests = [
        {
          board:
          {
            pieces: [
              ['k', '0', '0', '0', '0', '0', '0', '0'],
              ['0', 'q', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'B'],
              ['0', '0', '0', '0', '0', '0', 'B', 'K'],
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: 'checkmate'
        },
        {
          board:
          {
            pieces: [
              ['q', '0', '0', '0', 'r', '0', 'k', '0'],
              ['0', 'r', 'p', 'p', '0', 'p', 'p', 'p'],
              ['0', '0', '0', '0', 'b', 'n', '0', '0'],
              ['0', '0', '0', '0', 'b', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['P', '0', '0', '0', '0', '0', '0', '0'],
              ['P', '0', 'P', 'P', 'P', 'P', 'P', 'P'],
              ['0', 'K', 'R', '0', '0', 'B', 'N', '0'],
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: 'checkmate'
        },
      ];
      pinTests.forEach(({board, expectedMoves}) => {
        test('in different positions', () => {
          expect(calculatePosibleMoves(board, 'white')).toEqual(expectedMoves);
        });
      });
    });
  });
  describe('white attacking', () => {
    describe('should be able to block or move', () => {
      const pinTests = [
        {
          board:
          {
            pieces: [
              ['k', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', 'r', '0', '0', '0', '0', 'Q', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'K']
            ],
            turn: 'b',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '00': [{move: [1, 0]}, {move: [0, 1]}],
              '61': [{move: [1, 1]}, {capture: true, capturedPiece: 'Q',move: [6, 6]}]
          }
        },
        {
          board:
          {
            pieces: [
              ['k', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', 'B', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', 'b', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', 'Q', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'K']
            ],
            turn: 'b',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '00': [{move: [1, 0]}, {move: [0, 1]}],
              '51': [{move: [3, 3]}]
          }
        },
        {
          board:
          {
            pieces: [
              ['k', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', 'n', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', 'Q', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'K']
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '00': [{move: [1, 0]}, {move: [0, 1]}],
              '45': [{capture: true, capturedPiece: 'Q', move: [6, 6]}, {move: [3, 3]}]
          }
        },
        {
          board:
          {
            pieces: [
              ['k', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', 'q', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', 'Q', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'K']
            ],
            turn: 'b',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '00': [{move: [1, 0]}, {move: [0, 1]}],
              '16': [{capture: true, capturedPiece: 'Q', move: [6, 6]}, {move: [1, 1]}]
          }
        },
        {
          board:
          {
            pieces: [
              ['k', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', 'p', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', 'Q', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'K']
            ],
            turn: 'b',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '00': [{move: [1, 0]}, {move: [0, 1]}],
              '12': [{move: [2, 2]}]
          }
        },
        {
          board:
          {
            pieces: [
              ['k', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', 'q', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', 'p', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', 'b', '0', '0', '0', 'Q', '0'],
              ['0', '0', '0', '0', 'n', '0', '0', 'K']
            ],
            turn: 'b',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '00': [{move: [1, 0]}, {move: [0, 1]}],
              '15': [{move: [5, 5]}, {move: [1, 1]}, {move: [3, 3]}],
              '34': [{move: [4, 4]}],
              '62': [{move: [4, 4]}],
              '74': [{move: [5, 5]}, {capture: true, capturedPiece: 'Q', move: [6, 6]}]
          }
        },
      ];
      pinTests.forEach(({board, expectedMoves}) => {
        test('in different positions', () => {
          expect(calculatePosibleMoves(board, 'black')).toEqual(expectedMoves);
        });
      });
    });
    describe('should be only able to move', () => {
      const pinTests = [
        {
          board:
          {
            pieces: [
              ['k', '0', '0', '0', '0', '0', '0', '0'],
              ['p', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', 'Q', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'K'],
            ],
            turn: 'b',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '00': [{move: [0, 1]}]
          }
        },
        {
          board:
          {
            pieces: [
              ['0', 'r', '0', 'n', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', 'k', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'p'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', 'B', '0', '0', '0', '0', '0', '0'],
              ['P', 'B', 'P', 'P', 'P', 'N', '0', '0'],
              ['0', 'K', '0', '0', '0', '0', '0', 'Q'],
            ],
            turn: 'b',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '16': [{move: [2, 6]}, {move: [1, 7]}, {move: [0, 5]}]
          }
        },
        {
          board:
          {
            pieces: [
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', 'k', '0'],
              ['0', '0', '0', '0', '0', 'P', '0', '0'],
              ['0', '0', '0', '0', '0', 'K', 'P', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'P'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
            ],
            turn: 'b',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '26': [
                {move: [2, 7]},
                {move: [1, 7]},
                {move: [1, 6]},
                {move: [1, 5]},
                {move: [2, 5]}
            ]
            }
        },
        {
          board:
          {
            pieces: [
              ['0', 'n', '0', '0', '0', 'r', '0', '0'],
              ['p', 'p', 'p', '0', '0', 'p', 'b', 'p'],
              ['0', '0', '0', '0', 'p', '0', 'p', '0'],
              ['0', '0', '0', 'k', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['B', 'P', 'R', 'P', 'R', 'P', 'P', 'P'],
              ['0', '0', '0', '0', '0', '0', '0', 'K'],
            ],
            turn: 'b',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '33': [
                {move: [4, 3]},
                {move: [2, 3]}
            ]
            }
        },
      ];
      pinTests.forEach(({board, expectedMoves}) => {
        test('in different positions', () => {
          expect(calculatePosibleMoves(board, 'black')).toEqual(expectedMoves);
        });
      });
    });
    describe('should be only able to block', () => {
      const pinTests = [
        {
          board:
          {
            pieces: [
              ['R', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', 'p', 'p', 'k'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', 'P', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', 'B', '0', '0', '0', '0', '0'],
              ['K', '0', '0', '0', '0', '0', '0', '0'],
            ],
            turn: 'b',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '15': [{move: [3, 5]}],
              '16': [{move: [2, 6]}]
          }
        },
        {
          board:
          {
            pieces: [
              ['R', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', 'n', '0', '0', 'k'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', 'P', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', 'Q', '0', '0', '0', '0', '0', '0'],
              ['0', 'B', 'B', '0', '0', '0', '0', '0'],
              ['K', '0', '0', '0', '0', '0', '0', '0'],
            ],
            turn: 'b',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '14': [
                {move: [3, 5]},
                {move: [2, 6]}
            ]
          }
        },
      ];
      pinTests.forEach(({board, expectedMoves}) => {
        test('in different positions', () => {
          expect(calculatePosibleMoves(board, 'black')).toEqual(expectedMoves);
        });
      });
    });
    describe('should be only able to take', () => {
      const pinTests = [
        {
          board:
          {
            pieces: [
              ['0', '0', 'R', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['R', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', 'k', '0', '0', '0', '0'],
              ['0', '0', '0', '0', 'Q', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
            ],
            turn: 'b',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '33': [{capture: true, capturedPiece: 'Q', move: [4, 4]}]
          }
        },
        {
          board:
          {
            pieces: [
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['p', 'p', 'p', '0', '0', 'p', 'p', 'p'],
              ['0', '0', '0', 'k', 'p', '0', '0', '0'],
              ['0', '0', '0', 'R', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', 'B'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', 'Q', '0', '0', '0', '0', 'K'],
            ],
            turn: 'b',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '23': [{capture: true, capturedPiece: 'R', move: [3, 3]}],
              '24': [{capture: true, capturedPiece: 'R', move: [3, 3]}]
          }
        },
      ];
      pinTests.forEach(({board, expectedMoves}) => {
        test('in different positions', () => {
          expect(calculatePosibleMoves(board, 'black')).toEqual(expectedMoves);
        });
      });
    });
    describe('should be checkmate', () => {
      const pinTests = [
        {
          board:
          {
            pieces: [
              ['0', 'n', '0', '0', '0', 'r', '0', '0'],
              ['p', 'p', 'p', '0', '0', 'p', 'b', 'p'],
              ['0', '0', '0', 'p', 'p', '0', 'p', '0'],
              ['0', '0', '0', 'k', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', 'N', '0', '0'],
              ['B', 'P', 'R', 'P', 'R', 'P', 'P', 'P'],
              ['0', '0', '0', '0', '0', '0', '0', 'K'],
            ],
            turn: 'w',
            castling: '',
            enPassant: '-',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: 'checkmate'
        },
      ];
      pinTests.forEach(({board, expectedMoves}) => {
        test('in different positions', () => {
          expect(calculatePosibleMoves(board, 'black')).toEqual(expectedMoves);
        });
      });
    });
  });
  describe('special moves', () => {
    describe('should be able to En Passant', () => {
      const pinTests = [
        {
          board:
          {
            pieces: [
              ['k', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', 'p', 'P', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['0', '0', '0', '0', '0', '0', '0', '0'],
              ['K', '0', '0', '0', '0', '0', '0', '0'],
            ],
            turn: 'w',
            castling: '',
            enPassant: '21',
            halfMove: '0',
            fullMove: '1'
          },
            expectedMoves: {
              '32': [{move: [2, 1]}, {move: [2, 2]}],
              '70': [{move: [7, 1]}, {move: [6, 1]}, {move: [6, 0]}]
            }
        },
      ];
      pinTests.forEach(({board, expectedMoves}) => {
        test('in different positions', () => {
          expect(calculatePosibleMoves(board, 'white')).toEqual(expectedMoves);
        });
      });
    });
  })
});