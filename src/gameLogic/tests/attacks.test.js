const { attackedSquaresCheck } = require("../attacks");

describe('generates the attack board for a position with no pins', () => {
  describe('black attacking', () => {
    const attackTests = [
      {
        board: {
        pieces: [
          ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
          ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
          ['0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0'],
          ['P', 'P', 'P', 'P', 'P', 'P', 'P', 'P'],
          ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']
        ],
        turn: 'w',
        castling: '',
        enPassant: '-',
        halfMove: '0',
        fullMove: '1'
        },
        expectedAttackBoard: {
          attacksBoard: [
            ['0', '1', '1', '1', '1', '1', '1', '0'],
            ['1', '1', '1', '1', '1', '1', '1', '1'],
            ['1', '1', '1', '1', '1', '1', '1', '1'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
          ],
          checkingPiecePosition: "",
          pinnedPieces: {}
        },
      },
      {
        board: {
        pieces: [
          ['k', '0', '0', '0', '0', '0', 'q', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', 'K']
        ],
        turn: 'w',
        castling: '',
        enPassant: '-',
        halfMove: '0',
        fullMove: '1'
        },
        expectedAttackBoard: {
          attacksBoard: [
            ['1', '1', '1', '1', '1', '1', '0', '1'],
            ['1', '1', '0', '0', '0', '1', '1', '1'],
            ['0', '0', '0', '0', '1', '0', '1', '0'],
            ['0', '0', '0', '1', '0', '0', '1', '0'],
            ['0', '0', '1', '0', '0', '0', '1', '0'],
            ['0', '1', '0', '0', '0', '0', '1', '0'],
            ['1', '0', '0', '0', '0', '0', '1', '0'],
            ['0', '0', '0', '0', '0', '0', '1', '0']
          ],
          checkingPiecePosition: "",
          pinnedPieces: {}
        },
      },
      {
        board: {
        pieces: [
          ['r', '0', 'b', 'q', 'k', '0', 'n', 'r'],
          ['p', 'p', 'p', 'p', '0', 'p', 'p', 'p'],
          ['0', '0', 'n', '0', '0', '0', '0', '0'],
          ['0', '0', 'b', '0', 'p', '0', '0', '0'],
          ['0', '0', 'B', '0', 'P', '0', '0', '0'],
          ['0', '0', '0', '0', '0', 'N', '0', '0'],
          ['P', 'P', 'P', 'P', '0', 'P', 'P', 'P'],
          ['R', 'N', 'B', 'Q', 'K', '0', '0', 'R']
        ],
        turn: 'w',
        castling: '',
        enPassant: '-',
        halfMove: '0',
        fullMove: '1'
        },
        expectedAttackBoard: {
          attacksBoard: [
            ['0', '1', '1', '1', '1', '1', '1', '0'],
            ['1', '1', '1', '1', '1', '1', '0', '1'],
            ['1', '1', '1', '1', '1', '1', '1', '1'],
            ['1', '0', '0', '0', '1', '0', '1', '0'],
            ['0', '1', '0', '1', '0', '1', '0', '1'],
            ['1', '0', '0', '0', '1', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '1', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
          ],
          checkingPiecePosition: "",
          pinnedPieces: {}
        },
      },
      {
        board: {
        pieces: [
          ['0', 'r', '0', '0', 'r', '0', 'k', '0'],
          ['0', '0', 'p', '0', 'q', 'p', 'p', '0'],
          ['0', '0', 'p', 'p', '0', '0', '0', 'p'],
          ['p', '0', '0', '0', '0', '0', '0', '0'],
          ['P', '0', '0', 'P', 'P', '0', 'b', '0'],
          ['0', '0', 'P', '0', '0', 'N', '0', '0'],
          ['0', 'P', '0', 'Q', '0', '0', 'P', 'P'],
          ['R', '0', '0', '0', 'R', '0', 'K', '0']
        ],
        turn: 'w',
        castling: '',
        enPassant: '-',
        halfMove: '0',
        fullMove: '1'
        },
        expectedAttackBoard: {
          attacksBoard: [
            ['1', '1', '1', '1', '1', '1', '1', '1'],
            ['0', '1', '1', '1', '1', '1', '1', '1'],
            ['0', '1', '0', '1', '1', '1', '1', '1'],
            ['0', '1', '1', '1', '1', '1', '1', '1'],
            ['0', '1', '0', '0', '1', '0', '0', '1'],
            ['0', '1', '0', '0', '0', '1', '0', '1'],
            ['0', '1', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
          ],
          checkingPiecePosition: "",
          pinnedPieces: {}
        },
      },
    ];
    attackTests.forEach(({ board, expectedAttackBoard }) => {
      it('returns the attacked squares', () => {
        expect(attackedSquaresCheck(board.pieces, 'white')).toEqual(expectedAttackBoard)
      });
    });
  });
  describe('white attacking', () => {
    const attackTests = [
      {
        board: {
          pieces: [
            ['r', 'n', 'b', 'q', 'k', 'b', 'n', 'r'],
            ['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', 'P', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['P', 'P', 'P', 'P', '0', 'P', 'P', 'P'],
            ['R', 'N', 'B', 'Q', 'K', 'B', 'N', 'R']
          ],
          turn: 'b',
          castling: '',
          enPassant: '-',
          halfMove: '1',
          fullMove: '1'
        },
        expectedAttackBoard: {
          attacksBoard: [
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['1', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '1', '0', '1', '0', '1', '0', '1'],
            ['0', '0', '1', '0', '0', '0', '1', '0'],
            ['1', '1', '1', '1', '1', '1', '1', '1'],
            ['1', '1', '1', '1', '1', '1', '1', '1'],
            ['0', '1', '1', '1', '1', '1', '1', '0'],
          ],
          checkingPiecePosition: "",
          pinnedPieces: {}
        },
      },
      {
        board: {
        pieces: [
          ['k', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', '0', '0', '0', '0', '0', '0', '0'],
          ['0', 'Q', '0', '0', '0', '0', '0', 'K']
        ],
        turn: 'b',
        castling: '',
        enPassant: '-',
        halfMove: '0',
        fullMove: '1'
        },
        expectedAttackBoard: {
          attacksBoard: [
            ['0', '1', '0', '0', '0', '0', '0', '0'],
            ['0', '1', '0', '0', '0', '0', '0', '1'],
            ['0', '1', '0', '0', '0', '0', '1', '0'],
            ['0', '1', '0', '0', '0', '1', '0', '0'],
            ['0', '1', '0', '0', '1', '0', '0', '0'],
            ['0', '1', '0', '1', '0', '0', '0', '0'],
            ['1', '1', '1', '0', '0', '0', '1', '1'],
            ['1', '0', '1', '1', '1', '1', '1', '1'],
          ],
          checkingPiecePosition: "",
          pinnedPieces: {}
        },
      },
      {
        board: {
        pieces: [
          ['r', '0', 'b', 'q', 'k', '0', 'n', 'r'],
          ['p', 'p', 'p', 'p', '0', 'p', 'p', 'p'],
          ['0', '0', 'n', '0', '0', '0', '0', '0'],
          ['0', '0', 'b', '0', 'p', '0', '0', '0'],
          ['0', '0', 'B', '0', 'P', '0', '0', '0'],
          ['0', '0', '0', '0', '0', 'N', '0', '0'],
          ['P', 'P', 'P', 'P', '0', 'P', 'P', 'P'],
          ['R', 'N', 'B', 'Q', 'K', '0', '0', 'R']
        ],
        turn: 'w',
        castling: '',
        enPassant: '-',
        halfMove: '0',
        fullMove: '1'
        },
        expectedAttackBoard: {
          attacksBoard: [
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '1', '0', '0'],
            ['1', '0', '0', '0', '1', '0', '0', '0'],
            ['0', '1', '0', '1', '1', '1', '1', '0'],
            ['0', '0', '0', '1', '0', '0', '0', '1'],
            ['1', '1', '1', '1', '1', '1', '1', '1'],
            ['1', '1', '1', '1', '1', '1', '0', '1'],
            ['0', '1', '1', '1', '2', '1', '1', '0'],
          ],
          checkingPiecePosition: "",
          pinnedPieces: {}
        },
      },
      {
        board: {
        pieces: [
          ['0', 'r', '0', '0', 'r', '0', 'k', '0'],
          ['0', '0', 'p', '0', 'q', 'p', 'p', '0'],
          ['0', '0', 'p', 'p', '0', '0', '0', 'p'],
          ['p', '0', '0', '0', '0', '0', '0', '0'],
          ['P', '0', '0', 'P', 'P', '0', 'b', '0'],
          ['0', '0', 'P', '0', '0', 'N', '0', '0'],
          ['0', 'P', '0', 'Q', '0', '0', 'P', 'P'],
          ['R', '0', '0', '0', 'R', '0', 'K', '0']
        ],
        turn: 'w',
        castling: '',
        enPassant: '-',
        halfMove: '0',
        fullMove: '1'
        },
        expectedAttackBoard: {
          attacksBoard: [
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '1'],
            ['0', '1', '1', '1', '1', '1', '1', '0'],
            ['1', '1', '0', '1', '1', '1', '0', '1'],
            ['1', '0', '1', '1', '1', '1', '1', '1'],
            ['1', '1', '1', '1', '1', '1', '1', '1'],
            ['1', '1', '1', '1', '1', '1', '2', '1'],
          ],
          checkingPiecePosition: "",
          pinnedPieces: {}
        },
      },
    ];
    attackTests.forEach(({ board, expectedAttackBoard }) => {
      it('returns the attacked squares', () => {
        expect(attackedSquaresCheck(board.pieces, 'black')).toEqual(expectedAttackBoard)
      });
    });
  });
});

describe('generates the attack board for a position with pins', () => {
  describe('black attacking', () => {
    const attackTests = [
      {
        board: {
          pieces: [
            ['0', '0', '0', 'r', '0', '0', '0', 'k'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', 'P', '0', '0', '0', '0'],
            ['0', '0', '0', 'K', '0', '0', '0', '0'],
          ],
          turn: 'b',
          castling: '',
          enPassant: '-',
          halfMove: '1',
          fullMove: '1'
        },
        expectedAttackBoard: {
          attacksBoard: [
            ['1', '1', '1', '0', '1', '1', '1', '1'],
            ['0', '0', '0', '1', '0', '0', '1', '1'],
            ['0', '0', '0', '1', '0', '0', '0', '0'],
            ['0', '0', '0', '1', '0', '0', '0', '0'],
            ['0', '0', '0', '1', '0', '0', '0', '0'],
            ['0', '0', '0', '1', '0', '0', '0', '0'],
            ['0', '0', '0', '1', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
          ],
          checkingPiecePosition: "",
          pinnedPieces: {
            63: {
                pinDirection: "10",
                pinType: "soft",
              },
          }
        },
      },
      {
        board: {
          pieces: [
            ['0', '0', '0', '0', '0', '0', '0', 'k'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', 'b'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', 'P', '0', '0', '0', '0'],
            ['0', '0', 'K', '0', '0', '0', '0', '0'],
          ],
          turn: 'b',
          castling: '',
          enPassant: '-',
          halfMove: '1',
          fullMove: '1'
        },
        expectedAttackBoard: {
          attacksBoard: [
            ['0', '0', '0', '0', '0', '1', '1', '0'],
            ['0', '0', '0', '0', '0', '0', '1', '1'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '1', '0'],
            ['0', '0', '0', '0', '0', '1', '0', '0'],
            ['0', '0', '0', '0', '1', '0', '0', '0'],
            ['0', '0', '0', '1', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
          ],
          checkingPiecePosition: "",
          pinnedPieces: {
            63: {
                pinDirection: "1-1",
                pinType: "soft",
              },
          }
        },
      },
      {
        board: {
          pieces: [
            ['0', '0', '0', '0', 'r', '0', '0', 'k'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['b', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', '0', '0', '0', '0', 'q'],
            ['0', '0', '0', '0', '0', '0', '0', '0'],
            ['0', '0', '0', 'P', 'P', 'P', '0', '0'],
            ['0', '0', '0', '0', 'K', '0', '0', '0'],
          ],
          turn: 'b',
          castling: '',
          enPassant: '-',
          halfMove: '1',
          fullMove: '1'
        },
        expectedAttackBoard: {
          attacksBoard: [
            ['1', '1', '1', '1', '0', '1', '1', '2'],
            ['0', '0', '1', '0', '1', '0', '1', '1'],
            ['0', '1', '0', '0', '1', '1', '0', '1'],
            ['0', '0', '0', '0', '1', '0', '1', '1'],
            ['1', '1', '1', '1', '1', '1', '1', '0'],
            ['0', '0', '1', '0', '1', '0', '1', '1'],
            ['0', '0', '0', '1', '1', '1', '0', '1'],
            ['0', '0', '0', '0', '0', '0', '0', '1'],
          ],
          checkingPiecePosition: "",
          pinnedPieces: {
            63: {
                pinDirection: "11",
                pinType: "soft",
              },
            64: {
              pinDirection: "10",
              pinType: "soft",
            },
            65: {
              pinDirection: "1-1",
              pinType: "soft",
            },
          }
        },
      },
    ];
    attackTests.forEach(({ board, expectedAttackBoard }) => {
      it('returns the attacked squares', () => {
        expect(attackedSquaresCheck(board.pieces, 'white')).toEqual(expectedAttackBoard)
      });
    });
  });
});
